#!/usr/bin/env node

var net = require('net')
var MuxDemux = require('mux-demux')
var combine = require('stream-combiner')
var ms = require('msgpack-stream')
var httppp = require('httppp')
var program = require('commander')
var Auth = require("auth-stream")

program
.version(require('../package.json').version)
.option('-p, --port [port]', 'Port to listen for external connections on [port]', 8000)
.option('-c, --client-port [client]', 'Port to listen for client connections on [client]', 8001)
.option('-v, --verbose', 'verbose output')
.parse(process.argv)

if (program.verbose) process.env.DEBUG = '*'
var log = require('debug')('server')

var clients = {}

var appServer = net.createServer(function(socket) {
  log('new connection')
  var parser = httppp(function(info) {
    var host = (info[2].host && info[2].host.length) ? info[2].host[0] : null
    if (!host) {
      log('could not parse host', info[2]);
      socket.end()
      return
    }
    host = host.split(":").shift() // remove port from host header
    var subdomain = host.split('.')
    var service = subdomain[0]
    var id = subdomain[1]
    log('requesting service', service)
    var mx = clients[id]
    if (!mx) {
      log('client not connected', id)
      return socket.end()
    }
    parser.pipe(mx.createStream({
      service: service
    })).pipe(socket);
  })
  socket.pipe(parser)
})

appServer.listen(program.port, function() {
  log('app server listening on', program.port)
})

var clientServer = net.createServer(function(sock) {
  log('client connected')
  var mx = MuxDemux({
    wrapper: function (stream) {
      return combine(ms.createDecodeStream(), stream, ms.createEncodeStream())
    }
  })

  // auth
  var id
  mx.on('connection', function(stream) {
    if (!stream.meta.auth) return
    var auth = stream.meta.auth
    log('client identified', auth.id)
    clients[auth.id] = mx
    id = auth.id
    stream.end()
  })
  sock.pipe(mx).pipe(sock)
  sock.on('end', function() {
    log('client disconnected', id)
    id && delete clients[id]
  })
})

clientServer.listen(program.clientPort, function() {
  log('client server listening on', program.clientPort)
})
