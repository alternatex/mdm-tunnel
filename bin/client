#!/usr/bin/env node

var net = require('net')
var fs = require('fs')
var path = require('path')
var MuxDemux = require('mux-demux')
var combine = require('stream-combiner')
var ms = require('msgpack-stream')
var program = require('commander')
var join = require('path').join
var reconnect = require('reconnect')

program
.version(require('../package.json').version)
.option('-c, --config [file]', 'config file to load [file]', '~/.tunnel-services.json')
.option('-u, --user [user]', 'username to log in to server with', 'admin')
.option('-p, --port [port]', 'port on host server', 8001)
.option('-h, --host [host]', 'address of host server', 'localhost')
.option('-v, --verbose', 'verbose output')
.parse(process.argv)

if (program.verbose) process.env.DEBUG = '*'
var log = require('debug')('client')

function resolvePath(string) {
  if (string.substr(0,1) === '~')
    string = process.env.HOME + string.substr(1)
  return path.resolve(string)
}

log('reading config', resolvePath(program.config))
var services = JSON.parse(fs.readFileSync(resolvePath(program.config), 'utf8'))

if (!services) {
  console.error('config file invalid', program.config)
  process.exit(1)
}
Object.keys(services).forEach(function(service) {
  log('registering service', service + ':' + services[service])
})

log('connecting', program.host + ':' + program.port)
reconnect(function(socket) {
  log('sending auth', program.user)
  var mx = MuxDemux({
    wrapper: function (stream) {
      return combine(ms.createDecodeStream(), stream, ms.createEncodeStream())
    }
  })
  socket.pipe(mx).pipe(socket)
  var authStream = mx.createStream({
    auth: {
      id: program.user
    }
  })
  authStream.write({ id: program.user })
  authStream.end()

  mx.on('connection', function(req) {
    log('new connection', req.meta)
    if (!req.meta.service && req.meta !== 'services') {
      log('no service specified')
      return req.end()
    }

    if (req.meta.service) return getService(req)
      if (req.meta === 'services') return getServices(req)
  })

}).connect({
  port: program.port,
  host: program.host
})

function getServices(req) {
  req.write(Object.keys(services).join(','))
  req.end()
}

function getService(req) {
  var service = req.meta.service
  var port = services[req.meta.service]

  log('service request', service)
  var socket = net.connect({port: port})
  socket.on('error', function(error) {
    log('socket error', service, port, error)
    req.end()
  })

  req.pipe(socket).pipe(req)
}
