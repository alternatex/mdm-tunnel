#!/usr/bin/env node

var net = require('net')
var MuxDemux = require('mux-demux')
var combine = require('stream-combiner')
var ms = require('msgpack-stream')
var program = require('commander')
var debug = require('debug')
var log = debug('client')
var join = require('path').join
var reconnect = require('reconnect')

program
.version(require('../package.json').version)
.option('-c, --config [file]', 'Config file to load [file]', 'config.json')
.option('-u, --user [user]', 'username to log in to server with', 'admin')
.option('-t, --token [token]', 'token to authenticate with', 'admin')
.parse(process.argv)

var mx = MuxDemux({
  wrapper: function (stream) {
    return combine(ms.createDecodeStream(), stream, ms.createEncodeStream())
  }
})

var services = require(join(process.cwd(), program.config))
Object.keys(services).forEach(function(service) {
  log(service + ':' + services[service], 'registering')
})

reconnect(function(socket) {
  mx.pipe(socket).pipe(mx)
  log('sending auth', program.user)
  var authStream = mx.createStream({
    auth: {
      id: program.user
    }
  })
}).connect(8001)


mx.on('connection', function(req) {
  log('new connection')
  if (!req.meta.service) {
    log('no service specified')
    return req.end()
  }
  if (!services[req.meta.service]) {
    log('service not found', req.meta.service)
    return req.end()
  }
  var service = req.meta.service
  var port = services[req.meta.service]
  log('service request', service)
  var socket = net.connect({port: port})
  socket.on('error', function(error) {
    log('socket error', service, port, error)
    req.end()
  })
  req.pipe(socket).pipe(req)
})
