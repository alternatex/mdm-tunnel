#!/usr/bin/env node

var net = require('net')
var fs = require('fs')
var path = require('path')
var MuxDemux = require('mux-demux')
var combine = require('stream-combiner')
var ms = require('msgpack-stream')
var program = require('commander')
var join = require('path').join
var reconnect = require('reconnect')

program
.version(require('../package.json').version)
.option('-c, --config [file]', 'config file to load [file]', '~/.tunnel-services.json')
.option('-u, --user [user]', 'username to log in to server with', 'admin')
.option('-p, --port [port]', 'port on host server', 8001)
.option('-h, --host [host]', 'address of host server', 'localhost')
.option('-v, --verbose', 'verbose output')
.parse(process.argv)

if (program.verbose) process.env.DEBUG = '*'
var log = require('debug')('client')

var mx = MuxDemux({
  wrapper: function (stream) {
    return combine(ms.createDecodeStream(), stream, ms.createEncodeStream())
  }
})

function resolvePath(string) {
  if (string.substr(0,1) === '~')
    string = process.env.HOME + string.substr(1)
  return path.resolve(string)
}

log('reading config', resolvePath(program.config))
var services = JSON.parse(fs.readFileSync(resolvePath(program.config), 'utf8'))

if (!services) {
  console.error('config file invalid', program.config)
  process.exit(1)
}
Object.keys(services).forEach(function(service) {
  log('registering service', service + ':' + services[service])
})

log('connecting', program.host + ':' + program.port)
reconnect(function(socket) {
  mx.pipe(socket).pipe(mx)
  log('sending auth', program.user)
  var authStream = mx.createStream({
    auth: {
      id: program.user
    }
  })
}).connect({
  port: program.port,
  host: program.host
})


mx.on('connection', function(req) {
  log('new connection')
  if (!req.meta.service) {
    log('no service specified')
    return req.end()
  }
  if (!services[req.meta.service]) {
    log('service not found', req.meta.service)
    return req.end()
  }
  var service = req.meta.service
  var port = services[req.meta.service]
  log('service request', service)
  var socket = net.connect({port: port})
  socket.on('error', function(error) {
    log('socket error', service, port, error)
    req.end()
  })
  req.pipe(socket).pipe(req)
})
