#!/usr/bin/env node

var program = require('commander')
program
.version(require('../package.json').version)
.option('-c, --config [file]', 'config file to load [file]', '~/.tunnel-services.json')
.option('-u, --user [user]', 'username to log in to server with', 'admin')
.option('-p, --port [port]', 'port on host server', 8001)
.option('-h, --host [host]', 'address of host server', 'localhost')
.option('-v, --verbose', 'verbose output')
.parse(process.argv)

if (program.verbose) process.env.DEBUG = '*'
var log = require('debug')('client')

var net = require('net')
var fs = require('fs')
var path = require('path')
var join = require('path').join
var reconnect = require('reconnect')

var Client = require('../client')

function resolvePath(string) {
  if (string.substr(0,1) === '~')
    string = process.env.HOME + string.substr(1)
  return path.resolve(string)
}

log('reading config', resolvePath(program.config))
program.services = JSON.parse(fs.readFileSync(resolvePath(program.config), 'utf8'))

if (!program.services) {
  console.error('config file invalid', program.config)
  process.exit(1)
}
Object.keys(program.services).forEach(function(service) {
  log('registering service', service + ':' + program.services[service])
})

log('connecting', program.host + ':' + program.port)
reconnect(function(socket) {
  socket.pipe(Client(program)).pipe(socket)
}).connect({
  port: program.port,
  host: program.host
})
