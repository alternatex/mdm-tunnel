#!/usr/bin/env node

var program = require('commander')

program
.version(require('../package.json').version)
.option('-c, --config [file]', 'config file to load [file]', '~/.tunnel-services.json')
.option('-u, --user [user]', 'username to log in to server with', 'admin')
.option('-p, --port [port]', 'port on host server', 8001)
.option('-h, --host [host]', 'address of host server', 'localhost')
.option('--max-attempts [number]', 'maximum number of reconnection attempts', 3, Number)
.option('-v, --verbose', 'verbose output')
.parse(process.argv)

if (program.verbose) process.env.DEBUG = '*'
var log = require('debug')('client')

// Defer loading rest of deps until after setting DEBUG env var.
var net = require('net')
var fs = require('fs')
var path = require('path')
var reconnect = require('reconnect')

var Client = require('../client')

log('reading config', resolvePath(program.config))
program.services = JSON.parse(fs.readFileSync(resolvePath(program.config), 'utf8'))

if (!program.services) {
  console.error('config file invalid', program.config)
  process.exit(1)
}

Object.keys(program.services).forEach(function(service) {
  log('registering service', service + ':' + program.services[service])
})

log('connecting', program.host + ':' + program.port)
var reconnector = reconnect(function(socket) {
  socket.pipe(Client(program)).pipe(socket)
}).connect({
  port: program.port,
  host: program.host
}).on('connect', function() {
  log('connected')
}).on('disconnect', function(err) {
  var message = err || ''
  if (err && err.message) message = err.message
  log('disconnected', message)
}).on('reconnect', function(attempts, timeout) {
  attempts++
  log('attempting reconnection %d of %d after %dms', attempts, program.maxAttempts, timeout)
  if (attempts < program.maxAttempts) return
  reconnector.reconnect = false
  log('could not connect.')
  process.exit(1)
})

/**
 * Support ~ in path name.
 */
function resolvePath(string) {
  if (string.substr(0,1) === '~')
    string = process.env.HOME + string.substr(1)
  return path.resolve(string)
}
